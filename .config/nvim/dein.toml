# normal plugins

[[plugins]]
repo = 'apalmer1377/factorus'
lazy = 1
on_cmd = [
    'FExtractMethod', 'FMExtractMethod',
    'FAddParam', 'FEncapsulate',
    'FRenameArg', 'FRenameClass', 'FRenameField', 'FRenameMethod',
        'FRenameType', 'FRenameMacro',
    'Factorus', 'FRollback', 'FRebuild'
]
hook_source = '''
let g:factorus_line_length = 100
'''

[[plugins]]
repo = 'aurieh/discord.nvim'
lazy = 1
on_event = 'BufEnter'

[[plugins]]
repo = 'bounceme/remote-viewer'
depends = 'vim-dirvish'

[[plugins]]
repo = 'ciaranm/securemodelines'
lazy = 1
on_event = 'BufRead'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
lazy = 1
on_cmd = ['TableModeEnable', 'TableModeToggle']
hook_source = '''
let g:table_mode_map_prefix = '<Leader>tm'
let g:table_mode_realign_map = '<Leader>tmr'
let g:table_mode_delete_row_map = '<Leader>tmdd'
let g:table_mode_delete_column_map = '<Leader>tmdc'
let g:table_mode_add_formula_map = '<Leader>tmfa'
let g:table_mode_eval_formula_map = '<Leader>tmfe'
let g:table_mode_echo_cell_map = '<Leader>tm?'
let g:table_mode_sort_map = '<Leader>tms'

let g:table_mode_corner = '|'
'''
[plugins.on_map]
n = ['<Leader>tmm']

[[plugins]]
repo = 'elixir-editors/vim-elixir'

[[plugins]]
repo = 'equalsraf/neovim-gui-shim'

[[plugins]]
repo = 'eraserhd/parinfer-rust'
build = 'cargo build --release'

[[plugins]]
repo = 'hecal3/vim-leader-guide'
lazy = 1
hook_post_source = '''
call leaderGuide#register_prefix_descriptions("\<LocalLeader>", "g:llmap")
call leaderGuide#register_prefix_descriptions('', "g:topdict")
function! s:my_displayfunc()
    let g:leaderGuide#displayname = substitute(g:leaderGuide#displayname, '^:\(\)\?call \(.*\)<CR>$', '\1\2', '')
    let g:leaderGuide#displayname = substitute(g:leaderGuide#displayname, '^<\%(SID\|Plug\)>(\(.*\))$', '\1', '')
    let g:leaderGuide#displayname = substitute(g:leaderGuide#displayname, '^\w\{-1,}-', '', '')
endfunction
let g:leaderGuide_displayfunc = [function('s:my_displayfunc')]
'''
on_cmd = ['LeaderGuide', 'LeaderGuideVisual', 'LeaderGuideD', 'LeaderGuideVisualD']
[plugin.on_map]
nx = ['<Plug>leaderguide-global', '<Plug>leaderguide-buffer']

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'Dracula',
  \ }
'''

[[plugins]]
repo = 'jakwings/vim-pony'

[[plugins]]
repo = 'junegunn/goyo.vim'
lazy = 1
on_cmd = 'Goyo'

[[plugins]]
repo = 'jeroenbourgois/vim-actionscript'

[[plugins]]
repo = 'justinmk/vim-dirvish'

# [[plugins]]
# repo = 'kana/vim-repeat'

[[plugins]]
repo = 'kana/vim-smartchr'
lazy = 1
on_event = 'InsertCharPre'
hook_source = '''
augroup MyAutoCmd
    autocmd FileType c,cpp,perl inoremap <buffer> <expr> .
        \ smartchr#loop('.', '->', '...')
augroup END
'''

[[plugins]]
repo = 'katono/rogue.vim'
lazy = 1
on_cmd = ['Rogue', 'RogueScores', 'RogueResume']

[[plugins]]
repo = 'lambdalisue/gina.vim'

[[plugins]]
repo = 'lucidstack/hex.vim'
lazy = 1
on_cmd = [
    'HexAppendRelease',
    'HexAllReleases',
    'HexAllVersions',
    'HexPackageInfo',
    'HexOpenHexDocs',
    'HexOpenGithub',
]

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'nixprime/cpsm'
build = "dash -c 'PY3=ON ./install.sh'"

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'
hook_source = '''
let $RUST_SRC_PATH = expand('~/.multirust/toolchains/'
    \ .'stable-x86_64-unknown-linux-gnu/'
    \ .'lib/rustlib/src/rust/src/')
'''

[[plugins]]
repo = 'rhysd/rust-doc.vim'
lazy = 1
on_ft = 'rust'
on_cmd = ['RustDoc', 'RustDocFuzzy', 'RustDocModule']

[[plugins]]
repo = 'rust-lang/rust.vim'
lazy = 1
on_ft = 'rust'
on_cmd = 'RustPlay'

[[plugins]]
repo = 'sgur/vim-editorconfig'

[[plugins]]
repo = 'sjl/gundo.vim'
lazy = 1
on_cmd = ['GundoToggle', 'GundoShow', 'GundoHide', 'GundoRenderGraph']
on_fn = ['gundo#GundoToggle', 'gundo#GundoShow', 'gundo#GundoHide', 'gundo#GundoRenderGraph']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
lazy = 1
hook_add = '''
let g:webdevicons_enable_denite = 0
'''
hook_post_source = '''
augroup deniteresize
    autocmd!
    autocmd VimResized,VimEnter * call denite#custom#option('default,
        \'winheight', winheight(0) / 2)
augroup end
call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')
call denite#custom#var('file_rec', 'command',
    \ ['rg', '--files', ':directory'])
call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm'])
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts',
    \ ['--hidden', '--vimgrep', '--no-heading', '-S'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])
'''
on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord', 'DeniteProjectDir']

[[plugins]]
repo = 'Shougo/deol.nvim'
lazy = 1
on_cmd = ['Deol', 'DeolCd', 'DeolEdit']

[[plugins]]
repo = 'Shougo/echodoc.vim'
lazy = 1
hook_source = '''
let g:echodoc#enable_at_startup = 1
'''
on_event = 'InsertEnter'

[[plugins]]
repo = 'Shougo/junkfile.vim'
lazy = 1
on_cmd = 'JunkfileOpen'
on_func = ['junkfile#open', 'junkfile#open_immediately', 'junkfile#init', 'junkfile#_open']
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
lazy = 1
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
imap <silent> <C-k> <Plug>(neosnippet_jump_or_expand)
smap <silent> <C-k> <Plug>(neosnippet_jump_or_expand)
xmap <silent> <C-k> <Plug>(neosnippet_expand_target)
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#enable_completed_snippet = 1
let g:neosnippet#expand_word_boundary = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/vinarise.vim'
lazy = 1
on_cmd = 'Vinarise'

[[plugins]]
repo = 'slashmili/alchemist.vim'
lazy = 1
on_ft = 'elixir'

[[plugins]]
repo = 'tommcdo/vim-exchange'
lazy = 1
on_cmd = ['XchangeHighlightToggle', 'XchangeHighlightEnable', 'XchangeHighlightDisable', 'XchangeClear']
hook_add = '''
let g:exchange_no_mappings = 1

nmap <silent> cx <Plug>(Exchange)
xmap <silent> X <Plug>(Exchange)
nmap <silent> cxc <Plug>(ExchangeClear)
nmap <silent> cxx <Plug>(ExchangeLine)
'''
[plugins.on_map]
n = ['<Plug>(Exchange)', '<Plug>(ExchangeClear)', '<Plug>(ExchangeLine)']
x = ['<Plug>(Exchange)']

[[plugins]]
repo = 'tommcdo/vim-lion'
lazy = 1
hook_add = '''
let g:lion_create_maps = 0
let g:lion_squeeze_spaces = 1 " disable with b:lion_squeeze_spaces

nmap <silent> gl <Plug>LionRight
vmap <silent> gl <Plug>VLionRight
nmap <silent> gL <Plug>LionLeft
vmap <silent> gL <Plug>VLionLeft
'''
[plugins.on_map]
n = ['<Plug>LionRepeat', '<Plug>LionRight', '<Plug>LionLeft']
x = ['<Plug>VLionRight', '<Plug>VLionLeft']

[[plugins]]
repo = 'tpope/vim-characterize'
lazy = 1
[plugins.on_map]
n = 'ga'

[[plugins]]
repo = 'tpope/vim-commentary'
depends = 'vim-repeat'
lazy = 1
on_cmd = 'Commentary'
[plugins.on_map]
nxo = ['gc']

[[plugins]]
repo = 'tpope/vim-eunuch'

[[plugins]]
repo = 'tpope/vim-repeat'
lazy = 1
[plugins.on_map]
nx = '.'

[[plugins]]
repo = 'tpope/vim-surround'
depends = 'vim-repeat'
lazy = 1
[plugins.on_map]
n = ['cs', 'ds', 'ys']
x = ['S']

[[plugins]]
repo = 'tweekmonster/startuptime.vim'
lazy = 1
on_cmd = 'StartupTime'

[[plugins]]
repo = 'vim-scripts/info.vim'
lazy = 1
on_cmd = 'Info'

[[plugins]]
repo = 'w0rp/ale'
hook_source = '''
let g:ale_linters = {
\}
let g:ale_linters_ignore = {
\    'javascript': ['flow']
\}
let g:ale_fixers = {
\}
'''

[[plugins]]
repo = 'wellle/targets.vim'

# theme

[[plugins]]
repo = 'guns/xterm-color-table.vim'
lazy = 1
on_cmd = 'XtermColorTable'

[[plugins]]
repo = 'dracula/vim'
name = 'dracula'

# completions / indents / syntax

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'stephpy/vim-yaml'

[[plugins]]
repo = 'zig-lang/zig.vim'
